// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
  "context"
  "database/sql"
  "strings"
  "time"

  "github.com/Masterminds/squirrel"
)

const BookSeryTableName = "book_series"

var BookSeryAllColumns = []string{
  "id",
  
  "title",
  
  "author_id",
  
  "description",
  
  "created_at",
  
  "updated_at",
  
}

var BookSeryColumnsWOMagics = []string{
  "id",
  
  "title",
  
  "author_id",
  
  "description",
  
  
  
}

var BookSeryPrimaryKeyColumns = []string{
  "id",
  
  
  
  
  
  
}



type BookSery struct {
  ID string
  Title string
  AuthorID string
  Description 
  CreatedAt *time.Time
  UpdatedAt *time.Time
}

func (t *BookSery) Values() []interface{} {
  return []interface{}{t.ID,t.Title,t.AuthorID,t.Description,
  }
}

func (t *BookSery) SetMap() map[string]interface{} {
  return map[string]interface{}{"id": t.ID,"title": t.Title,"author_id": t.AuthorID,"description": t.Description,
  }
}


func (t *BookSery) Ptrs() []interface{} {
  return []interface{}{
    &t.ID,
    &t.Title,
    &t.AuthorID,
    &t.Description,
    &t.CreatedAt,
    &t.UpdatedAt,
  }
}




func IterateBookSery(sc interface{ Scan(...interface{}) error}) (BookSery, error) {
  t := BookSery{}
  if err := sc.Scan(t.Ptrs()...); err != nil {
    return BookSery{}, MapError(err)
  }
  return t, nil
}

func SelectBookSeryByAuthorID(ctx context.Context, txn *sql.Tx, author_id string) ([]*BookSery, error) {
  query, params, err := squirrel.
    Select(BookSeryAllColumns...).
    From(BookSeryTableName).
    Where(squirrel.Eq{
      "author_id": author_id,
    }).
    ToSql()
  if err != nil {
    return nil, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return nil, MapError(err)
	}
  rows, err := stmt.QueryContext(ctx, params...)
  if err != nil {
    return nil, MapError(err)
  }
  res := make([]*BookSery, 0)
  for rows.Next() {
    t, err := IterateBookSery(rows)
    if err != nil {
      return nil, MapError(err)
    }
    res = append(res, &t)
  }
  return res, nil
  
}

func SelectOneBookSeryByID(ctx context.Context, txn *sql.Tx, id string) (BookSery, error) {
  query, params, err := squirrel.
    Select(BookSeryAllColumns...).
    From(BookSeryTableName).
    Where(squirrel.Eq{
      "id": id,
    }).
    ToSql()
  if err != nil {
    return BookSery{}, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return BookSery{}, MapError(err)
	}
  return IterateBookSery(stmt.QueryRowContext(ctx, params...))
  
}




func InsertBookSery(ctx context.Context, txn *sql.Tx, records []*BookSery) error {
  for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
    return nil
  }
  sq := squirrel.Insert(BookSeryTableName).Columns(BookSeryColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func UpdateBookSery(ctx context.Context, txn *sql.Tx, record BookSery) error {
	sql, params, err := squirrel.Update(BookSeryTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
      "id": record.ID,
    }).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func UpsertBookSery(ctx context.Context, txn *sql.Tx, record BookSery) error {
	updateSQL, params, err := squirrel.Update(BookSeryTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+BookSeryTableName+" SET ")
	query, params, err := squirrel.Insert(BookSeryTableName).Columns(BookSeryColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteBookSeryByAuthorID(ctx context.Context, txn *sql.Tx, author_id string) error {
  query, params, err := squirrel.
    Delete(BookSeryTableName).
    Where(squirrel.Eq{
      "author_id": author_id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteOneBookSeryByID(ctx context.Context, txn *sql.Tx, id string) error {
  query, params, err := squirrel.
    Delete(BookSeryTableName).
    Where(squirrel.Eq{
      "id": id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

