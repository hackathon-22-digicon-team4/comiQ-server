// Code generated by "script/dtogen". DO NOT EDIT.
package daocore

import (
  "context"
  "database/sql"
  "strings"
  "time"

  "github.com/Masterminds/squirrel"
)

const BookUserStampTableName = "book_user_stamps"

var BookUserStampAllColumns = []string{
  "id",
  
  "book_id",
  
  "page_num",
  
  "user_id",
  
  "stamp_id",
  
  "created_at",
  
  "updated_at",
  
}

var BookUserStampColumnsWOMagics = []string{
  "id",
  
  "book_id",
  
  "page_num",
  
  "user_id",
  
  "stamp_id",
  
  
  
}

var BookUserStampPrimaryKeyColumns = []string{
  "id",
  
  
  
  
  
  
  
}



type BookUserStamp struct {
  ID string
  BookID string
  PageNum int
  UserID string
  StampID string
  CreatedAt *time.Time
  UpdatedAt *time.Time
}

func (t *BookUserStamp) Values() []interface{} {
  return []interface{}{t.ID,t.BookID,t.PageNum,t.UserID,t.StampID,
  }
}

func (t *BookUserStamp) SetMap() map[string]interface{} {
  return map[string]interface{}{"id": t.ID,"book_id": t.BookID,"page_num": t.PageNum,"user_id": t.UserID,"stamp_id": t.StampID,
  }
}


func (t *BookUserStamp) Ptrs() []interface{} {
  return []interface{}{
    &t.ID,
    &t.BookID,
    &t.PageNum,
    &t.UserID,
    &t.StampID,
    &t.CreatedAt,
    &t.UpdatedAt,
  }
}




func IterateBookUserStamp(sc interface{ Scan(...interface{}) error}) (BookUserStamp, error) {
  t := BookUserStamp{}
  if err := sc.Scan(t.Ptrs()...); err != nil {
    return BookUserStamp{}, MapError(err)
  }
  return t, nil
}

func SelectBookUserStampByBookID(ctx context.Context, txn *sql.Tx, book_id string) ([]*BookUserStamp, error) {
  query, params, err := squirrel.
    Select(BookUserStampAllColumns...).
    From(BookUserStampTableName).
    Where(squirrel.Eq{
      "book_id": book_id,
    }).
    ToSql()
  if err != nil {
    return nil, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return nil, MapError(err)
	}
  rows, err := stmt.QueryContext(ctx, params...)
  if err != nil {
    return nil, MapError(err)
  }
  res := make([]*BookUserStamp, 0)
  for rows.Next() {
    t, err := IterateBookUserStamp(rows)
    if err != nil {
      return nil, MapError(err)
    }
    res = append(res, &t)
  }
  return res, nil
  
}

func SelectBookUserStampByStampID(ctx context.Context, txn *sql.Tx, stamp_id string) ([]*BookUserStamp, error) {
  query, params, err := squirrel.
    Select(BookUserStampAllColumns...).
    From(BookUserStampTableName).
    Where(squirrel.Eq{
      "stamp_id": stamp_id,
    }).
    ToSql()
  if err != nil {
    return nil, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return nil, MapError(err)
	}
  rows, err := stmt.QueryContext(ctx, params...)
  if err != nil {
    return nil, MapError(err)
  }
  res := make([]*BookUserStamp, 0)
  for rows.Next() {
    t, err := IterateBookUserStamp(rows)
    if err != nil {
      return nil, MapError(err)
    }
    res = append(res, &t)
  }
  return res, nil
  
}

func SelectBookUserStampByUserID(ctx context.Context, txn *sql.Tx, user_id string) ([]*BookUserStamp, error) {
  query, params, err := squirrel.
    Select(BookUserStampAllColumns...).
    From(BookUserStampTableName).
    Where(squirrel.Eq{
      "user_id": user_id,
    }).
    ToSql()
  if err != nil {
    return nil, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return nil, MapError(err)
	}
  rows, err := stmt.QueryContext(ctx, params...)
  if err != nil {
    return nil, MapError(err)
  }
  res := make([]*BookUserStamp, 0)
  for rows.Next() {
    t, err := IterateBookUserStamp(rows)
    if err != nil {
      return nil, MapError(err)
    }
    res = append(res, &t)
  }
  return res, nil
  
}

func SelectOneBookUserStampByID(ctx context.Context, txn *sql.Tx, id string) (BookUserStamp, error) {
  query, params, err := squirrel.
    Select(BookUserStampAllColumns...).
    From(BookUserStampTableName).
    Where(squirrel.Eq{
      "id": id,
    }).
    ToSql()
  if err != nil {
    return BookUserStamp{}, MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
    return BookUserStamp{}, MapError(err)
	}
  return IterateBookUserStamp(stmt.QueryRowContext(ctx, params...))
  
}




func InsertBookUserStamp(ctx context.Context, txn *sql.Tx, records []*BookUserStamp) error {
  for i := range records {
		if records[i] == nil {
			records = append(records[:i], records[i+1:]...)
		}
	}
	if len(records) == 0 {
    return nil
  }
  sq := squirrel.Insert(BookUserStampTableName).Columns(BookUserStampColumnsWOMagics...)
	for _, r := range records {
		if r == nil {
			continue
		}
		sq = sq.Values(r.Values()...)
	}
	query, params, err := sq.ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func UpdateBookUserStamp(ctx context.Context, txn *sql.Tx, record BookUserStamp) error {
	sql, params, err := squirrel.Update(BookUserStampTableName).SetMap(record.SetMap()).
		Where(squirrel.Eq{
      "id": record.ID,
    }).
		ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, sql)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func UpsertBookUserStamp(ctx context.Context, txn *sql.Tx, record BookUserStamp) error {
	updateSQL, params, err := squirrel.Update(BookUserStampTableName).SetMap(record.SetMap()).ToSql()
	if err != nil {
		return err
	}
	updateSQL = strings.TrimPrefix(updateSQL, "UPDATE "+BookUserStampTableName+" SET ")
	query, params, err := squirrel.Insert(BookUserStampTableName).Columns(BookUserStampColumnsWOMagics...).Values(record.Values()...).SuffixExpr(squirrel.Expr("ON DUPLICATE KEY UPDATE "+updateSQL, params...)).ToSql()
	if err != nil {
		return err
	}
	stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteBookUserStampByBookID(ctx context.Context, txn *sql.Tx, book_id string) error {
  query, params, err := squirrel.
    Delete(BookUserStampTableName).
    Where(squirrel.Eq{
      "book_id": book_id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteBookUserStampByStampID(ctx context.Context, txn *sql.Tx, stamp_id string) error {
  query, params, err := squirrel.
    Delete(BookUserStampTableName).
    Where(squirrel.Eq{
      "stamp_id": stamp_id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteBookUserStampByUserID(ctx context.Context, txn *sql.Tx, user_id string) error {
  query, params, err := squirrel.
    Delete(BookUserStampTableName).
    Where(squirrel.Eq{
      "user_id": user_id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

func DeleteOneBookUserStampByID(ctx context.Context, txn *sql.Tx, id string) error {
  query, params, err := squirrel.
    Delete(BookUserStampTableName).
    Where(squirrel.Eq{
      "id": id,
    }).
    ToSql()
  if err != nil {
    return MapError(err)
  }
  stmt, err := txn.PrepareContext(ctx, query)
	if err != nil {
		return MapError(err)
	}
	if _, err = stmt.Exec(params...); err != nil {
		return MapError(err)
	}
	return nil
}

